BLACK=$(tput -Txterm setaf 0)
RED=$(tput -Txterm setaf 1)
GREEN=$(tput -Txterm setaf 2)
YELLOW=$(tput -Txterm setaf 3)
BLUE=$(tput -Txterm setaf 4)
PINK=$(tput -Txterm setaf 5)
CYAN=$(tput -Txterm setaf 6)
BOLD=$(tput -Txterm bold)
RESET=$(tput -Txterm sgr0)

GIT_PROMPT=/opt/bash-git-prompt
if [ "$(uname)" == "Darwin" ]; then
    GIT_PROMPT=`brew --prefix bash-git-prompt`/share
fi

if [ -f ${GIT_PROMPT}/gitprompt.sh ]; then
    GIT_PROMPT_ONLY_IN_REPO=0
    GIT_PROMPT_PREFIX=" ${RESET}on "
    GIT_PROMPT_SUFFIX="${RESET}"
    GIT_PROMPT_LEADING_SPACE=0
    GIT_PROMPT_SEPARATOR=' '
    GIT_PROMPT_BRANCH="${BLUE}"

    #GIT_PROMPT_COMMAND_OK="${GREEN}✔${RESET}" # displays as ✔
    #GIT_PROMPT_COMMAND_FAIL="${RED}✘-_LAST_COMMAND_STATE_${RESET}" # displays as ✘-1 for exit code 1
    # _LAST_COMMAND_INDICATOR_${RESET}

    GIT_PROMPT_START="\n${GREEN}\u ${RESET}at ${GREEN}\h ${RESET}in ${PINK}\w${RESET}"
    GIT_PROMPT_END="${RESET}\n\$ "

    source ${GIT_PROMPT}/gitprompt.sh
else
    function parse_git_dirty() {
        [[ $(git status 2> /dev/null | tail -n1) != *"working directory clean"* ]] && echo "*"
    }

    function parse_git_branch() {
        git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
    }

    export PS1="\n${GREEN}\u ${RESET}at ${GREEN}\h ${RESET}in ${PINK}\w${RESET}\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")${BLUE}\$(parse_git_branch)${RESET}\n$ ${RESET}"
fi

# mem/file sync of history
export PROMPT_COMMAND="history -a; history -n; history -r; ${PROMPT_COMMAND}"
