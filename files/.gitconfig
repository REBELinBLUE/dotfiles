[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[color]
    # Use colors in Git commands that are capable of colored output when outputting to the terminal
    ui = auto

[color "branch"]
    # Highlight current. Yellow local branches; Green remotes.
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    # Yellow meta; Magenta line info; Red for deleltions; Green for additions.
    frag = magenta
    meta = yellow
    new = green
    old = red

[color "status"]
    # Changed files are yellow. Staged files are green. New (untracked) files are cyan.
    # Headers are gray (white dimmed). Branch is always green even in headers
    added = green
    branch = green
    changed = yellow
    header = white dim
    untracked = cyan

[diff]
    # Use more time to create better diffs
    algorithm = patience

    # Diff will detect both renames and copies
    renames = copies

    tool = chdiff

[core]
    editor = nano
    quotepath = false
    excludesfile = ~/.gitignore
    #attributesfile = ~/.gitattributes

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

    tool = chdiff

[push]
    default = simple

[mergetool "chdiff"]
    cmd = /usr/bin/env chdiff --wait "$LOCAL" "$REMOTE"
    keepBackup = false
    trustExitCode = false

[difftool]
    prompt = false

[difftool "chdiff"]
    cmd = /usr/bin/env chdiff $LOCAL $REMOTE

[filter "media"]
    clean = git-media-clean %f
    smudge = git-media-smudge %f

[filter "lfs"]
    clean = git lfs clean %f
    smudge = git lfs smudge %f
    required = true

[help]

    # Automatically correct and execute mistyped commands
    autocorrect = 1

[alias]

    # Amend the currently staged files to the latest commit
    amend = commit --amend

    # Show verbose output about all branches
    branches = branch -vv --all

    # Show verbose output about the local branches
    br = branch -vv --list

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = !git add --all && git commit --all --verbose

    # Discard the changes
    discard = checkout --

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Pretty graph
    graph = log --graph --oneline --decorate

    # View the SHA, description, and history graph of the latest 20 commits
    l = log --format='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --no-merges -n 30

    # Pull in remote changes for the current repository and all its submodules
    pl = !"git pull; git submodule foreach git pull origin master"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase --interactive HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    rmtag = "!r() { git tag --deleteg $1 && git push origin :refs/tags/$1 }; r"

    # Show verbose output about remotes
    remotes = remote --verbose

    # Show short status
    st = status --short

    # List stashes
    stashes = stash list

    # Show verbose output about tags
    tags = tag --list

    # Uncommit the previous commits
    uncommit = reset --mixed HEAD~

    # Unstage changes
    unstage = reset --quiet HEAD --

[pager]
    diff = diff-so-fancy | less --tabs=4 -RFX --pattern='^(added|deleted|modified):'
    show = diff-so-fancy | less --tabs=4 -RFX --pattern='^(added|deleted|modified):'
