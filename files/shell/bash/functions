if [ -f /opt/bashmarks/bashmarks.sh ]; then
    source /opt/bashmarks/bashmarks.sh
fi

if [ -f /opt/bash-up/up.sh ]; then
    source /opt/bash-up/up.sh
fi

# Colour man pages
man() {
    #LESS_TERMCAP_mb=$'\E[01;31m'      # begin blinking
    #LESS_TERMCAP_md=$'\E[01;31m'      # begin bold
    #LESS_TERMCAP_me=$'\E[0m'          # end mode
    #LESS_TERMCAP_se=$'\E[0m'          # end standout-mode
    #LESS_TERMCAP_so=$'\E[01;44;33m'   # begin standout-mode - info box
    #LESS_TERMCAP_ue=$'\E[0m'          # end underline
    #LESS_TERMCAP_us=$'\E[01;32m'      # begin underline

    env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
    man "$@"
}

# Helper functions
e_header() {
    source $HOME/.dotfiles/files/shell/bash/colours
    printf "\n${CLI_BOLD}${CLI_MAGENTA}==========  %s  ==========${CLI_RESET}\n" "$@"
    source $HOME/.dotfiles/files/shell/bash/clear-colours
}

e_arrow() {
    printf "➜ $@\n"
}

e_success() {
    source $HOME/.dotfiles/files/shell/bash/colours
    printf "${CLI_GREEN}✔ %s${CLI_RESET}\n" "$@"
    source $HOME/.dotfiles/files/shell/bash/clear-colours
}

e_error() {
    source $HOME/.dotfiles/files/shell/bash/colours
    printf "${CLI_RED}✖ %s${CLI_RESET}\n" "$@"
    source $HOME/.dotfiles/files/shell/bash/clear-colours
}

e_warning() {
    source $HOME/.dotfiles/files/shell/bash/colours
    printf "${CLI_YELLOW}➜ %s${CLI_RESET}\n" "$@"
    source $HOME/.dotfiles/files/shell/bash/clear-colours
}

e_underline() {
    source $HOME/.dotfiles/files/shell/bash/colours
    printf "${CLI_UNDERLINE}${CLI_BOLD}%s${CLI_RESET}\n" "$@"
    source $HOME/.dotfiles/files/shell/bash/clear-colours
}

e_bold() {
    source $HOME/.dotfiles/files/shell/bash/colours
    printf "${CLI_BOLD}%s${CLI_RESET}\n" "$@"
    source $HOME/.dotfiles/files/shell/bash/clear-colours
}

e_tabbed() {
    source $HOME/.dotfiles/files/shell/bash/colours
    printf "${CLI_YELLOW}%s-20s${CLI_RESET}%s\n" "$1" "$2" # fixme: not working
    source $HOME/.dotfiles/files/shell/bash/clear-colours
}

e_note() {
    source $HOME/.dotfiles/files/shell/bash/colours
    printf "${CLI_UNDERLINE}${CLI_BOLD}${CLI_BLUE}Note:${CLI_RESET} ${CLI_BLUE}%s${CLI_RESET}\n" "$@"
    source $HOME/.dotfiles/files/shell/bash/clear-colours
}

seek_confirmation() {
    source $HOME/.dotfiles/files/shell/bash/colours
    printf "\n${CLI_BOLD}$@${CLI_RESET}"
    read -p " (y/n) " -n 1
    printf "\n"
    source $HOME/.dotfiles/files/shell/bash/clear-colours
}

# Test whether the result of an 'ask' is a confirmation
is_confirmed() {
    if [[ "$REPLY" =~ ^[Yy]$ ]]; then
        return 0
    fi

    return 1
}

type_exists() {
    if [ $(type -P $1) ]; then
        return 0
    fi

    return 1
}

is_os() {
    if [[ "${OSTYPE}" == $1* ]]; then
        return 0
    fi

    return 1
}

e_help() {
    e_header "I am a head ermessage - e_header"
    e_success "I am a success message - e_success"
    e_error "I am an error message - e_error"
    e_warning "I am a warning message - e_warning"
    e_underline "I am underlined text - e_underline"
    e_bold "I am bold text - e_bold"
    e_note "I am a note - e_note"
}


# Wrapper around sshrc
ssh() {
    cat ~/.ssh/config.d/* > ~/.ssh/config;

    if [ $1 = "mycloud" ] || [ $1 = "mypassword" ] || [ $1 = "imac" ] || [ $1 = "mba" ]; then
        $(which ssh) "$@"
    elif type_exists "sshrc"; then
        $(which sshrc) "$@"
    else
        $(which ssh) "$@"
    fi
}

sleepnas() {
    cat ~/.ssh/config.d/* > ~/.ssh/config;
    $(which ssh) mycloud "halt &"
}

if is_os "darwin"; then

    # Empty the Trash on all mounted volumes and the main HDD.
    # Also, clear Apple’s System Logs to improve shell startup speed.
    # Finally, clear download history from quarantine. https://mths.be/bum
    emptytrash() {
        sudo rm -rfv /Volumes/*/.Trashes
        sudo rm -rfv ~/.Trash
        sudo rm -rfv /private/var/log/asl/*.asl
        sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'delete from LSQuarantineEvent'
    }


    # Update homebrew
    brewup() {
        brew update
        brew upgrade
        brew bundle --file="${HOME}/.dotfiles/brewfiles/all"
        brew cleanup
        brew-php-switcher $(cat ~/.cache/php_version) -s
    }

    # Update everything
    update() {
        sudo mas upgrade
        sudo softwareupdate -i -a
        composer self-update
        composer global install
        brewup
        npm install npm -g && npm update -g
        #sudo pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs pip install -U -q
    }


    # TODO: Extract output from tap file to include number of tests in message
    phpunit() {
        php $(which phpunit) $@
        RESULT=$?

        if [[ $RESULT = 0 ]]; then
            TITLE="Success"
            MESSAGE="Tests ran succesfully"
            IMAGE="$HOME/.dotfiles/files/icons/Success.icns"
            SOUND="Glass"
        elif [[ $RESULT = 1 || $RESULT = 2 ]]; then
            TITLE="Failed"
            MESSAGE="Tests are broken"
            IMAGE="$HOME/.dotfiles/files/icons/Failed.icns"
            SOUND="Basso"
        else
            return $RESULT
        fi

        $(brew --prefix terminal-notifier)/bin/terminal-notifier -activate "com.googlecode.iTerm2" \
                                                                 -contentImage "$IMAGE" \
                                                                 -title "PHPUnit"\
                                                                 -subtitle "$TITLE" \
                                                                 -sound "$SOUND" \
                                                                 -message "$MESSAGE"
    }

    php-switch() {
        brew-php-switcher "$@" -s
        echo "$@" > $XDG_CACHE_HOME/php_version
    }

fi

eval "$(direnv hook bash)"
