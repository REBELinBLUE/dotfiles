function __container_should_offer_completions_for -a expected_commands -a expected_positional_index
    set -l unparsed_tokens (__container_tokens -pc)
    set -l positional_index 0
    set -l commands

    switch $unparsed_tokens[1]
    case 'container'
        __container_parse_subcommand 0 'debug' 'version' 'h/help'
        switch $unparsed_tokens[1]
        case 'create'
            __container_parse_subcommand -r 2 'w/cwd=' 'e/env=' 'env-file=' 'uid=' 'gid=' 'i/interactive' 't/tty' 'u/user=' 'c/cpus=' 'm/memory=' 'd/detach' 'entrypoint=' 'mount=' 'p/publish=' 'publish-socket=' 'tmpfs=' 'name=' 'remove' 'platform=' 'os=' 'a/arch=' 'v/volume=' 'k/kernel=' 'network=' 'cidfile=' 'no-dns' 'dns=' 'dns-domain=' 'dns-search=' 'dns-option=' 'l/label=' 'virtualization' 'ssh' 'scheme=' 'debug' 'version' 'h/help'
        case 'delete'
            __container_parse_subcommand -r 1 'f/force' 'a/all' 'debug' 'version' 'h/help'
        case 'exec'
            __container_parse_subcommand -r 2 'w/cwd=' 'e/env=' 'env-file=' 'uid=' 'gid=' 'i/interactive' 't/tty' 'u/user=' 'debug' 'version' 'h/help'
        case 'inspect'
            __container_parse_subcommand -r 1 'debug' 'version' 'h/help'
        case 'kill'
            __container_parse_subcommand -r 1 's/signal=' 'a/all' 'debug' 'version' 'h/help'
        case 'list'
            __container_parse_subcommand 0 'a/all' 'q/quiet' 'format=' 'debug' 'version' 'h/help'
        case 'logs'
            __container_parse_subcommand 1 'debug' 'f/follow' 'boot' 'n=' 'version' 'h/help'
        case 'run'
            __container_parse_subcommand -r 2 'w/cwd=' 'e/env=' 'env-file=' 'uid=' 'gid=' 'i/interactive' 't/tty' 'u/user=' 'c/cpus=' 'm/memory=' 'd/detach' 'entrypoint=' 'mount=' 'p/publish=' 'publish-socket=' 'tmpfs=' 'name=' 'remove' 'platform=' 'os=' 'a/arch=' 'v/volume=' 'k/kernel=' 'network=' 'cidfile=' 'no-dns' 'dns=' 'dns-domain=' 'dns-search=' 'dns-option=' 'l/label=' 'virtualization' 'ssh' 'scheme=' 'debug' 'disable-progress-updates' 'version' 'h/help'
        case 'start'
            __container_parse_subcommand 1 'a/attach' 'i/interactive' 'debug' 'version' 'h/help'
        case 'stop'
            __container_parse_subcommand -r 1 'a/all' 's/signal=' 't/time=' 'debug' 'version' 'h/help'
        case 'build'
            __container_parse_subcommand 1 'c/cpus=' 'm/memory=' 'build-arg=' 'f/file=' 'l/label=' 'no-cache' 'o/output=' 'platform=' 'os=' 'a/arch=' 'progress=' 'vsock-port=' 't/tag=' 'target=' 'q/quiet' 'version' 'h/help'
        case 'images'
            __container_parse_subcommand 0 'version' 'h/help'
            switch $unparsed_tokens[1]
            case 'inspect'
                __container_parse_subcommand -r 1 'debug' 'version' 'h/help'
            case 'list'
                __container_parse_subcommand 0 'q/quiet' 'v/verbose' 'format=' 'debug' 'version' 'h/help'
            case 'load'
                __container_parse_subcommand 0 'debug' 'i/input=' 'version' 'h/help'
            case 'prune'
                __container_parse_subcommand 0 'debug' 'version' 'h/help'
            case 'pull'
                __container_parse_subcommand 1 'debug' 'scheme=' 'disable-progress-updates' 'platform=' 'os=' 'a/arch=' 'version' 'h/help'
            case 'push'
                __container_parse_subcommand 1 'debug' 'scheme=' 'disable-progress-updates' 'platform=' 'version' 'h/help'
            case 'delete'
                __container_parse_subcommand -r 1 'a/all' 'debug' 'version' 'h/help'
            case 'save'
                __container_parse_subcommand 1 'debug' 'platform=' 'os=' 'a/arch=' 'o/output=' 'version' 'h/help'
            case 'tag'
                __container_parse_subcommand 2 'debug' 'version' 'h/help'
            end
        case 'registry'
            __container_parse_subcommand 0 'version' 'h/help'
            switch $unparsed_tokens[1]
            case 'login'
                __container_parse_subcommand 1 'u/username=' 'password-stdin' 'scheme=' 'version' 'h/help'
            case 'logout'
                __container_parse_subcommand 1 'debug' 'version' 'h/help'
            case 'default'
                __container_parse_subcommand 0 'version' 'h/help'
                switch $unparsed_tokens[1]
                case 'set'
                    __container_parse_subcommand 1 'debug' 'scheme=' 'version' 'h/help'
                case 'unset'
                    __container_parse_subcommand 0 'version' 'h/help'
                case 'inspect'
                    __container_parse_subcommand 0 'version' 'h/help'
                end
            end
        case 'volume'
            __container_parse_subcommand 0 'version' 'h/help'
            switch $unparsed_tokens[1]
            case 'create'
                __container_parse_subcommand 1 's=' 'opt=' 'label=' 'version' 'h/help'
            case 'delete'
                __container_parse_subcommand -r 1 'version' 'h/help'
            case 'list'
                __container_parse_subcommand 0 'q/quiet' 'format=' 'version' 'h/help'
            case 'inspect'
                __container_parse_subcommand -r 1 'version' 'h/help'
            end
        case 'builder'
            __container_parse_subcommand 0 'version' 'h/help'
            switch $unparsed_tokens[1]
            case 'start'
                __container_parse_subcommand 0 'c/cpus=' 'm/memory=' 'version' 'h/help'
            case 'status'
                __container_parse_subcommand 0 'json' 'version' 'h/help'
            case 'stop'
                __container_parse_subcommand 0 'version' 'h/help'
            case 'delete'
                __container_parse_subcommand 0 'f/force' 'version' 'h/help'
            end
        case 'network'
            __container_parse_subcommand 0 'version' 'h/help'
            switch $unparsed_tokens[1]
            case 'create'
                __container_parse_subcommand 1 'debug' 'version' 'h/help'
            case 'delete'
                __container_parse_subcommand -r 1 'a/all' 'debug' 'version' 'h/help'
            case 'list'
                __container_parse_subcommand 0 'q/quiet' 'format=' 'debug' 'version' 'h/help'
            case 'inspect'
                __container_parse_subcommand -r 1 'debug' 'version' 'h/help'
            end
        case 'system'
            __container_parse_subcommand 0 'version' 'h/help'
            switch $unparsed_tokens[1]
            case 'dns'
                __container_parse_subcommand 0 'version' 'h/help'
                switch $unparsed_tokens[1]
                case 'create'
                    __container_parse_subcommand 1 'version' 'h/help'
                case 'delete'
                    __container_parse_subcommand 1 'version' 'h/help'
                case 'list'
                    __container_parse_subcommand 0 'version' 'h/help'
                case 'default'
                    __container_parse_subcommand 0 'version' 'h/help'
                    switch $unparsed_tokens[1]
                    case 'set'
                        __container_parse_subcommand 1 'version' 'h/help'
                    case 'unset'
                        __container_parse_subcommand 0 'version' 'h/help'
                    case 'inspect'
                        __container_parse_subcommand 0 'version' 'h/help'
                    end
                end
            case 'logs'
                __container_parse_subcommand 0 'debug' 'last=' 'f/follow' 'version' 'h/help'
            case 'start'
                __container_parse_subcommand 0 'a/app-root=' 'install-root=' 'debug' 'enable-kernel-install' 'disable-kernel-install' 'version' 'h/help'
            case 'stop'
                __container_parse_subcommand 0 'p/prefix=' 'version' 'h/help'
            case 'status'
                __container_parse_subcommand 0 'p/prefix=' 'version' 'h/help'
            case 'kernel'
                __container_parse_subcommand 0 'version' 'h/help'
                switch $unparsed_tokens[1]
                case 'set'
                    __container_parse_subcommand 0 'binary=' 'tar=' 'arch=' 'recommended' 'version' 'h/help'
                end
            end
        case 'help'
            __container_parse_subcommand -r 1 'version'
        end
    end

    test "$commands" = "$expected_commands" -a \( -z "$expected_positional_index" -o "$expected_positional_index" -eq "$positional_index" \)
end

function __container_tokens
    if test (string split -m 1 -f 1 -- . "$FISH_VERSION") -gt 3
        commandline --tokens-raw $argv
    else
        commandline -o $argv
    end
end

function __container_parse_subcommand -S
    argparse -s r -- $argv
    set -l positional_count $argv[1]
    set -l option_specs $argv[2..]

    set -a commands $unparsed_tokens[1]
    set -e unparsed_tokens[1]

    set positional_index 0

    while true
        argparse -sn "$commands" $option_specs -- $unparsed_tokens 2> /dev/null
        set unparsed_tokens $argv
        set positional_index (math $positional_index + 1)
        if test (count $unparsed_tokens) -eq 0 -o \( -z "$_flag_r" -a "$positional_index" -gt "$positional_count" \)
            return 0
        end
        set -e unparsed_tokens[1]
    end
end

function __container_complete_directories
    set -l token (commandline -t)
    string match -- '*/' $token
    set -l subdirs $token*/
    printf '%s\n' $subdirs
end

function __container_custom_completion
    set -x SAP_SHELL fish
    set -x SAP_SHELL_VERSION $FISH_VERSION

    set -l tokens (__container_tokens -p)
    if test -z (__container_tokens -t)
        set -l index (count (__container_tokens -pc))
        set tokens $tokens[..$index] \'\' $tokens[(math $index + 1)..]
    end
    command $tokens[1] $argv $tokens
end

complete -c 'container' -f
complete -c 'container' -n '__container_should_offer_completions_for "container"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'create' -d 'Create a new container'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'delete' -d 'Delete one or more containers'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'exec' -d 'Run a new command in a running container'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'inspect' -d 'Display information about one or more containers'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'kill' -d 'Kill one or more running containers'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'list' -d 'List containers'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'logs' -d 'Fetch container stdio or boot logs'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'run' -d 'Run a container'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'start' -d 'Start a container'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'stop' -d 'Stop one or more running containers'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'build' -d 'Build an image from a Dockerfile'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'images' -d 'Manage images'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'registry' -d 'Manage registry configurations'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'volume' -d 'Manage container volumes'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'builder' -d 'Manage an image builder instance'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'network' -d 'Manage container networks'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'system' -d 'Manage system components'
complete -c 'container' -n '__container_should_offer_completions_for "container" 1' -fa 'help' -d 'Show subcommand help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'cwd' -s 'w' -l 'workdir' -d 'Current working directory for the container' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'env' -s 'e' -d 'Set environment variables' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'env-file' -d 'Read in a file of environment variables' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'uid' -d 'Set the uid for the process' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'gid' -d 'Set the gid for the process' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'interactive' -s 'i' -d 'Keep Stdin open even if not attached'
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'tty' -s 't' -d 'Open a tty with the process'
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'user' -s 'u' -d 'Set the user for the process' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'cpus' -s 'c' -d 'Number of CPUs to allocate to the container' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'memory' -s 'm' -d 'Amount of memory in bytes, kilobytes (K), megabytes (M), or gigabytes (G) for the container, with MB granularity (for example, 1024K will result in 1MB being allocated for the container)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'detach' -s 'd' -d 'Run the container and detach from the process'
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'entrypoint' -d 'Override the entrypoint of the image' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'mount' -d 'Add a mount to the container (type=<>,source=<>,target=<>,readonly)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'publish' -s 'p' -d 'Publish a port from container to host (format: [host-ip:]host-port:container-port[/protocol])' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'publish-socket' -d 'Publish a socket from container to host (format: host_path:container_path)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'tmpfs' -d 'Add a tmpfs mount to the container at the given path' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'name' -d 'Assign a name to the container. If excluded will be a generated UUID' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'remove' -l 'rm' -d 'Remove the container after it stops'
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'platform' -d 'Platform for the image if it\'s multi-platform. This takes precedence over --os and --arch' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'os' -d 'Set OS if image can target multiple operating systems' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'arch' -s 'a' -d 'Set arch if image can target multiple architectures' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'volume' -s 'v' -d 'Bind mount a volume into the container' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'kernel' -s 'k' -d 'Set a custom kernel path' -rF
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'network' -d 'Attach the container to a network' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'cidfile' -d 'Write the container ID to the path provided' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'no-dns' -d 'Do not configure DNS in the container'
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'dns' -d 'DNS nameserver IP address' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'dns-domain' -d 'Default DNS domain' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'dns-search' -d 'DNS search domains' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'dns-option' -d 'DNS options' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'label' -s 'l' -d 'Add a key=value label to the container' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'virtualization' -d 'Expose virtualization capabilities to the container. (Host must have nested virtualization support, and guest kernel must have virtualization capabilities enabled)'
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'ssh' -d 'Forward SSH agent socket to container'
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'scheme' -d 'Scheme to use when connecting to the container registry. One of (http, https, auto)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container create"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container delete"' -l 'force' -s 'f' -d 'Force the removal of one or more running containers'
complete -c 'container' -n '__container_should_offer_completions_for "container delete"' -l 'all' -s 'a' -d 'Remove all containers'
complete -c 'container' -n '__container_should_offer_completions_for "container delete"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container delete"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container delete"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container exec"' -l 'cwd' -s 'w' -l 'workdir' -d 'Current working directory for the container' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container exec"' -l 'env' -s 'e' -d 'Set environment variables' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container exec"' -l 'env-file' -d 'Read in a file of environment variables' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container exec"' -l 'uid' -d 'Set the uid for the process' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container exec"' -l 'gid' -d 'Set the gid for the process' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container exec"' -l 'interactive' -s 'i' -d 'Keep Stdin open even if not attached'
complete -c 'container' -n '__container_should_offer_completions_for "container exec"' -l 'tty' -s 't' -d 'Open a tty with the process'
complete -c 'container' -n '__container_should_offer_completions_for "container exec"' -l 'user' -s 'u' -d 'Set the user for the process' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container exec"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container exec"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container exec"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container inspect"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container inspect"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container inspect"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container kill"' -l 'signal' -s 's' -d 'Signal to send the container(s)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container kill"' -l 'all' -s 'a' -d 'Kill all running containers'
complete -c 'container' -n '__container_should_offer_completions_for "container kill"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container kill"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container kill"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container list"' -l 'all' -s 'a' -d 'Show stopped containers as well'
complete -c 'container' -n '__container_should_offer_completions_for "container list"' -l 'quiet' -s 'q' -d 'Only output the container ID'
complete -c 'container' -n '__container_should_offer_completions_for "container list"' -l 'format' -d 'Format of the output' -rfka 'json table'
complete -c 'container' -n '__container_should_offer_completions_for "container list"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container list"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container list"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container logs"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container logs"' -l 'follow' -s 'f' -d 'Follow log output'
complete -c 'container' -n '__container_should_offer_completions_for "container logs"' -l 'boot' -d 'Display the boot log for the container instead of stdio'
complete -c 'container' -n '__container_should_offer_completions_for "container logs"' -s 'n' -d 'Number of lines to show from the end of the logs. If not provided this will print all of the logs' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container logs"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container logs"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'cwd' -s 'w' -l 'workdir' -d 'Current working directory for the container' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'env' -s 'e' -d 'Set environment variables' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'env-file' -d 'Read in a file of environment variables' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'uid' -d 'Set the uid for the process' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'gid' -d 'Set the gid for the process' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'interactive' -s 'i' -d 'Keep Stdin open even if not attached'
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'tty' -s 't' -d 'Open a tty with the process'
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'user' -s 'u' -d 'Set the user for the process' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'cpus' -s 'c' -d 'Number of CPUs to allocate to the container' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'memory' -s 'm' -d 'Amount of memory in bytes, kilobytes (K), megabytes (M), or gigabytes (G) for the container, with MB granularity (for example, 1024K will result in 1MB being allocated for the container)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'detach' -s 'd' -d 'Run the container and detach from the process'
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'entrypoint' -d 'Override the entrypoint of the image' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'mount' -d 'Add a mount to the container (type=<>,source=<>,target=<>,readonly)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'publish' -s 'p' -d 'Publish a port from container to host (format: [host-ip:]host-port:container-port[/protocol])' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'publish-socket' -d 'Publish a socket from container to host (format: host_path:container_path)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'tmpfs' -d 'Add a tmpfs mount to the container at the given path' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'name' -d 'Assign a name to the container. If excluded will be a generated UUID' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'remove' -l 'rm' -d 'Remove the container after it stops'
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'platform' -d 'Platform for the image if it\'s multi-platform. This takes precedence over --os and --arch' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'os' -d 'Set OS if image can target multiple operating systems' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'arch' -s 'a' -d 'Set arch if image can target multiple architectures' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'volume' -s 'v' -d 'Bind mount a volume into the container' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'kernel' -s 'k' -d 'Set a custom kernel path' -rF
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'network' -d 'Attach the container to a network' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'cidfile' -d 'Write the container ID to the path provided' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'no-dns' -d 'Do not configure DNS in the container'
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'dns' -d 'DNS nameserver IP address' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'dns-domain' -d 'Default DNS domain' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'dns-search' -d 'DNS search domains' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'dns-option' -d 'DNS options' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'label' -s 'l' -d 'Add a key=value label to the container' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'virtualization' -d 'Expose virtualization capabilities to the container. (Host must have nested virtualization support, and guest kernel must have virtualization capabilities enabled)'
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'ssh' -d 'Forward SSH agent socket to container'
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'scheme' -d 'Scheme to use when connecting to the container registry. One of (http, https, auto)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'disable-progress-updates' -d 'Disable progress bar updates'
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container run"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container start"' -l 'attach' -s 'a' -d 'Attach STDOUT/STDERR'
complete -c 'container' -n '__container_should_offer_completions_for "container start"' -l 'interactive' -s 'i' -d 'Attach container\'s STDIN'
complete -c 'container' -n '__container_should_offer_completions_for "container start"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container start"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container start"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container stop"' -l 'all' -s 'a' -d 'Stop all running containers'
complete -c 'container' -n '__container_should_offer_completions_for "container stop"' -l 'signal' -s 's' -d 'Signal to send the container(s)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container stop"' -l 'time' -s 't' -d 'Seconds to wait before killing the container(s)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container stop"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container stop"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container stop"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -l 'cpus' -s 'c' -d 'Number of CPUs to allocate to the container' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -l 'memory' -s 'm' -d 'Amount of memory in bytes, kilobytes (K), megabytes (M), or gigabytes (G) for the container, with MB granularity (for example, 1024K will result in 1MB being allocated for the container)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -l 'build-arg' -d 'Set build-time variables' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -l 'file' -s 'f' -d 'Path to Dockerfile' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -l 'label' -s 'l' -d 'Set a label' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -l 'no-cache' -d 'Do not use cache'
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -l 'output' -s 'o' -d 'Output configuration for the build' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -l 'platform' -d 'add the platform to the build' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -l 'os' -d 'add the OS type to the build' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -l 'arch' -s 'a' -d 'add the architecture type to the build' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -l 'progress' -d 'Progress type - one of [auto|plain|tty]' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -l 'vsock-port' -d 'Builder-shim vsock port' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -s 't' -l 'tag' -d 'Name for the built image' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -l 'target' -d 'Set the target build stage' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -l 'quiet' -s 'q' -d 'Suppress build output'
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container build"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container images"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container images"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container images" 1' -fa 'inspect' -d 'Display information about one or more images'
complete -c 'container' -n '__container_should_offer_completions_for "container images" 1' -fa 'list' -d 'List images'
complete -c 'container' -n '__container_should_offer_completions_for "container images" 1' -fa 'load' -d 'Load images from an OCI compatible tar archive'
complete -c 'container' -n '__container_should_offer_completions_for "container images" 1' -fa 'prune' -d 'Remove unreferenced and dangling images'
complete -c 'container' -n '__container_should_offer_completions_for "container images" 1' -fa 'pull' -d 'Pull an image'
complete -c 'container' -n '__container_should_offer_completions_for "container images" 1' -fa 'push' -d 'Push an image'
complete -c 'container' -n '__container_should_offer_completions_for "container images" 1' -fa 'delete' -d 'Remove one or more images'
complete -c 'container' -n '__container_should_offer_completions_for "container images" 1' -fa 'save' -d 'Save an image as an OCI compatible tar archive'
complete -c 'container' -n '__container_should_offer_completions_for "container images" 1' -fa 'tag' -d 'Tag an image'
complete -c 'container' -n '__container_should_offer_completions_for "container images inspect"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container images inspect"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container images inspect"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container images list"' -l 'quiet' -s 'q' -d 'Only output the image name'
complete -c 'container' -n '__container_should_offer_completions_for "container images list"' -l 'verbose' -s 'v' -d 'Verbose output'
complete -c 'container' -n '__container_should_offer_completions_for "container images list"' -l 'format' -d 'Format of the output' -rfka 'json table'
complete -c 'container' -n '__container_should_offer_completions_for "container images list"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container images list"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container images list"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container images load"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container images load"' -l 'input' -s 'i' -d 'Path to the tar archive to load images from' -rF
complete -c 'container' -n '__container_should_offer_completions_for "container images load"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container images load"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container images prune"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container images prune"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container images prune"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container images pull"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container images pull"' -l 'scheme' -d 'Scheme to use when connecting to the container registry. One of (http, https, auto)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container images pull"' -l 'disable-progress-updates' -d 'Disable progress bar updates'
complete -c 'container' -n '__container_should_offer_completions_for "container images pull"' -l 'platform' -d 'Platform string in the form \'os/arch/variant\'. Example \'linux/arm64/v8\', \'linux/amd64\'. This takes precedence over --os and --arch' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container images pull"' -l 'os' -d 'Set OS if image can target multiple operating systems' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container images pull"' -l 'arch' -s 'a' -d 'Set arch if image can target multiple architectures' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container images pull"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container images pull"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container images push"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container images push"' -l 'scheme' -d 'Scheme to use when connecting to the container registry. One of (http, https, auto)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container images push"' -l 'disable-progress-updates' -d 'Disable progress bar updates'
complete -c 'container' -n '__container_should_offer_completions_for "container images push"' -l 'platform' -d 'Platform string in the form \'os/arch/variant\'. Example \'linux/arm64/v8\', \'linux/amd64\'' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container images push"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container images push"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container images delete"' -l 'all' -s 'a' -d 'Remove all images'
complete -c 'container' -n '__container_should_offer_completions_for "container images delete"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container images delete"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container images delete"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container images save"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container images save"' -l 'platform' -d 'Platform string in the form \'os/arch/variant\'. Example \'linux/arm64/v8\', \'linux/amd64\'. This takes precedence over --os and --arch' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container images save"' -l 'os' -d 'Set OS if image can target multiple operating systems' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container images save"' -l 'arch' -s 'a' -d 'Set arch if image can target multiple architectures' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container images save"' -l 'output' -s 'o' -d 'Path to save the image tar archive' -rF
complete -c 'container' -n '__container_should_offer_completions_for "container images save"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container images save"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container images tag"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container images tag"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container images tag"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container registry"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container registry"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container registry" 1' -fa 'login' -d 'Login to a registry'
complete -c 'container' -n '__container_should_offer_completions_for "container registry" 1' -fa 'logout' -d 'Log out from a registry'
complete -c 'container' -n '__container_should_offer_completions_for "container registry" 1' -fa 'default' -d 'Manage the default image registry'
complete -c 'container' -n '__container_should_offer_completions_for "container registry login"' -l 'username' -s 'u' -d 'Username' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container registry login"' -l 'password-stdin' -d 'Take the password from stdin'
complete -c 'container' -n '__container_should_offer_completions_for "container registry login"' -l 'scheme' -d 'Scheme to use when connecting to the container registry. One of (http, https, auto)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container registry login"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container registry login"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container registry logout"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container registry logout"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container registry logout"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container registry default"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container registry default"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container registry default" 1' -fa 'set' -d 'Set the default registry'
complete -c 'container' -n '__container_should_offer_completions_for "container registry default" 1' -fa 'unset' -d 'Unset the default registry'
complete -c 'container' -n '__container_should_offer_completions_for "container registry default" 1' -fa 'inspect' -d 'Display the default registry domain'
complete -c 'container' -n '__container_should_offer_completions_for "container registry default set"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container registry default set"' -l 'scheme' -d 'Scheme to use when connecting to the container registry. One of (http, https, auto)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container registry default set"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container registry default set"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container registry default unset"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container registry default unset"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container registry default inspect"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container registry default inspect"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container volume"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container volume"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container volume" 1' -fa 'create' -d 'Create a volume'
complete -c 'container' -n '__container_should_offer_completions_for "container volume" 1' -fa 'delete' -d 'Remove one or more volumes'
complete -c 'container' -n '__container_should_offer_completions_for "container volume" 1' -fa 'list' -d 'List volumes'
complete -c 'container' -n '__container_should_offer_completions_for "container volume" 1' -fa 'inspect' -d 'Display detailed information on one or more volumes'
complete -c 'container' -n '__container_should_offer_completions_for "container volume create"' -s 's' -d 'Size of the volume (default: 512GB). Examples: 1G, 512MB, 2T' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container volume create"' -l 'opt' -d 'Set driver specific options' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container volume create"' -l 'label' -d 'Set metadata on a volume' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container volume create"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container volume create"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container volume delete"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container volume delete"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container volume list"' -l 'quiet' -s 'q' -d 'Only display volume names'
complete -c 'container' -n '__container_should_offer_completions_for "container volume list"' -l 'format' -d 'Format of the output' -rfka 'json table'
complete -c 'container' -n '__container_should_offer_completions_for "container volume list"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container volume list"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container volume inspect"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container volume inspect"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container builder"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container builder"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container builder" 1' -fa 'start' -d 'Start builder'
complete -c 'container' -n '__container_should_offer_completions_for "container builder" 1' -fa 'status' -d 'Print builder status'
complete -c 'container' -n '__container_should_offer_completions_for "container builder" 1' -fa 'stop' -d 'Stop builder'
complete -c 'container' -n '__container_should_offer_completions_for "container builder" 1' -fa 'delete' -d 'Delete builder'
complete -c 'container' -n '__container_should_offer_completions_for "container builder start"' -l 'cpus' -s 'c' -d 'Number of CPUs to allocate to the container' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container builder start"' -l 'memory' -s 'm' -d 'Amount of memory in bytes, kilobytes (K), megabytes (M), or gigabytes (G) for the container, with MB granularity (for example, 1024K will result in 1MB being allocated for the container)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container builder start"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container builder start"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container builder status"' -l 'json' -d 'Display detailed status in json format'
complete -c 'container' -n '__container_should_offer_completions_for "container builder status"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container builder status"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container builder stop"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container builder stop"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container builder delete"' -l 'force' -s 'f' -d 'Force delete builder even if it is running'
complete -c 'container' -n '__container_should_offer_completions_for "container builder delete"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container builder delete"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container network"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container network"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container network" 1' -fa 'create' -d 'Create a new network'
complete -c 'container' -n '__container_should_offer_completions_for "container network" 1' -fa 'delete' -d 'Delete one or more networks'
complete -c 'container' -n '__container_should_offer_completions_for "container network" 1' -fa 'list' -d 'List networks'
complete -c 'container' -n '__container_should_offer_completions_for "container network" 1' -fa 'inspect' -d 'Display information about one or more networks'
complete -c 'container' -n '__container_should_offer_completions_for "container network create"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container network create"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container network create"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container network delete"' -l 'all' -s 'a' -d 'Remove all networks'
complete -c 'container' -n '__container_should_offer_completions_for "container network delete"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container network delete"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container network delete"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container network list"' -l 'quiet' -s 'q' -d 'Only output the network name'
complete -c 'container' -n '__container_should_offer_completions_for "container network list"' -l 'format' -d 'Format of the output' -rfka 'json table'
complete -c 'container' -n '__container_should_offer_completions_for "container network list"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container network list"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container network list"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container network inspect"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container network inspect"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container network inspect"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container system"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container system"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container system" 1' -fa 'dns' -d 'Manage local DNS domains'
complete -c 'container' -n '__container_should_offer_completions_for "container system" 1' -fa 'logs' -d 'Fetch system logs for `container` services'
complete -c 'container' -n '__container_should_offer_completions_for "container system" 1' -fa 'start' -d 'Start `container` services'
complete -c 'container' -n '__container_should_offer_completions_for "container system" 1' -fa 'stop' -d 'Stop all `container` services'
complete -c 'container' -n '__container_should_offer_completions_for "container system" 1' -fa 'status' -d 'Show the status of `container` services'
complete -c 'container' -n '__container_should_offer_completions_for "container system" 1' -fa 'kernel' -d 'Manage the default kernel configuration'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns" 1' -fa 'create' -d 'Create a local DNS domain for containers (must run as an administrator)'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns" 1' -fa 'delete' -d 'Delete a local DNS domain (must run as an administrator)'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns" 1' -fa 'list' -d 'List local DNS domains'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns" 1' -fa 'default' -d 'Set or unset the default local DNS domain'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns create"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns create"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns delete"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns delete"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns list"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns list"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns default"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns default"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns default" 1' -fa 'set' -d 'Set the default local DNS domain'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns default" 1' -fa 'unset' -d 'Unset the default local DNS domain'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns default" 1' -fa 'inspect' -d 'Display the default local DNS domain'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns default set"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns default set"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns default unset"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns default unset"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns default inspect"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container system dns default inspect"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container system logs"' -l 'debug' -d 'Enable debug output [environment: CONTAINER_DEBUG]'
complete -c 'container' -n '__container_should_offer_completions_for "container system logs"' -l 'last' -d 'Fetch logs starting from the specified time period (minus the current time); supported formats: m, h, d' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container system logs"' -l 'follow' -s 'f' -d 'Follow log output'
complete -c 'container' -n '__container_should_offer_completions_for "container system logs"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container system logs"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container system start"' -l 'app-root' -s 'a' -d 'Application data directory' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container system start"' -l 'install-root' -d 'Path to the installation root directory' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container system start"' -l 'debug' -d 'Enable debug logging for the runtime daemon.'
complete -c 'container' -n '__container_should_offer_completions_for "container system start"' -l 'enable-kernel-install' -d 'Specify whether the default kernel should be installed or not. The default behavior is to prompt the user for a response.'
complete -c 'container' -n '__container_should_offer_completions_for "container system start"' -l 'disable-kernel-install' -d 'Specify whether the default kernel should be installed or not. The default behavior is to prompt the user for a response.'
complete -c 'container' -n '__container_should_offer_completions_for "container system start"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container system start"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container system stop"' -l 'prefix' -s 'p' -d 'Launchd prefix for `container` services' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container system stop"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container system stop"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container system status"' -l 'prefix' -s 'p' -d 'Launchd prefix for `container` services' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container system status"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container system status"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container system kernel"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container system kernel"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container system kernel" 1' -fa 'set' -d 'Set the default kernel'
complete -c 'container' -n '__container_should_offer_completions_for "container system kernel set"' -l 'binary' -d 'Path to the binary to set as the default kernel. If used with --tar, this points to a location inside the tar' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container system kernel set"' -l 'tar' -d 'Filesystem path or remote URL to a tar ball that contains the kernel to use' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container system kernel set"' -l 'arch' -d 'The architecture of the kernel binary. One of (amd64, arm64)' -rfka ''
complete -c 'container' -n '__container_should_offer_completions_for "container system kernel set"' -l 'recommended' -d 'Download and install the recommended kernel as the default. This flag ignores any other arguments'
complete -c 'container' -n '__container_should_offer_completions_for "container system kernel set"' -l 'version' -d 'Show the version.'
complete -c 'container' -n '__container_should_offer_completions_for "container system kernel set"' -s 'h' -l 'help' -d 'Show help information.'
complete -c 'container' -n '__container_should_offer_completions_for "container help"' -l 'version' -d 'Show the version.'
