[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[color]
    # Use colors in Git commands that are capable of colored output when outputting to the terminal
    ui = auto

[color "branch"]
    # Highlight current. Yellow local branches; Green remotes.
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = 11
    frag = magenta bold
    commit = yellow bold
    old = red bold
    new = green bold
    whitespace = red reverse

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[color "status"]
    # Changed files are yellow. Staged files are green. New (untracked) files are cyan.
    # Headers are gray (white dimmed). Branch is always green even in headers
    added = green
    branch = green
    changed = yellow
    header = white dim
    untracked = cyan

[init]
    defaultBranch = main

[gpg]
    #program = /usr/local/bin/notify-yubikey-sign
    format = ssh

[gpg "ssh"]
    program = "/Applications/1Password.app/Contents/MacOS/op-ssh-sign"

[commit]
    gpgsign = true

[core]
    fsmonitor = true
    editor = nano
    quotepath = false
    excludesfile = ~/.dotfiles/files/config/git/ignore
    #attributesfile = ~/.dotfiles/files/config/git/attributes
    #sshCommand = /usr/local/bin/notify-yubikey-ssh

    pager = diff-so-fancy | less --tabs=4 -RFX

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

[pager]
    diff = diff-so-fancy | less --tabs=4 -RFX --pattern='^(Date|added|deleted|modified): '
    show = diff-so-fancy | less --tabs=4 -RFX --pattern='^(Date|added|deleted|modified): '

[diff-so-fancy]
    markEmptyLines = false

[push]
    default = simple
    autoSetupRemote = true

[pull]
    rebase = false

[diff]
    # Use more time to create better diffs
    algorithm = patience

    # Diff will detect both renames and copies
    renames = copies

    tool = Kaleidoscope

    orderfile = ~/.dotfiles/files/config/git/order

[difftool]
    prompt = false

[difftool "Kaleidoscope"]
    cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

    tool = Kaleidoscope

[mergetool "Kaleidoscope"]
    cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
    trustExitCode = true

[mergetool]
    prompt = false

[filter "media"]
    clean = git-media-clean %f
    smudge = git-media-smudge %f

[filter "lfs"]
    clean = git lfs clean %f
    smudge = git lfs smudge %f
    required = true

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[tag]
    forceSignAnnotated = true
    gpgsign = true

[branch]
    sort = -committerdate

[alias]
    # List all aliases
    aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort -u

    # Amend the currently staged files to the latest commit
    amend = commit --amend

    # Show verbose output about all branches
    branches = branch -vv --all

    # Show verbose output about the local branches
    br = branch -vv --list # FIXME: Add a function to make "git branch" default to this

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = !git add --all && git commit --all --verbose

    # Discard the changes
    discard = checkout --

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Pretty graph
    graph = log --graph --oneline --decorate

    # View the SHA, description, and history graph of the latest 30 commits
    l = log --format='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --no-merges -n 30 --abbrev-commit --date=relative

    patch = !git --no-pager diff --no-color

    # Pull in remote changes for the current repository and all its submodules
    pl = !"git pull; git submodule foreach git pull origin master"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase --interactive HEAD~$1; }; r"

    resign = "!r() { git rebase --exec 'git commit --amend --no-edit -n -S' -i \"$1\"; }; r"

    # Remove the old tag with this  name and tag the latest commit with it.
    rmtag = "!r() { git tag --delete $1 && git push origin :refs/tags/$1; }; r"

    # Print the root dir
    root = "!git rev-parse --show-toplevel"

    # Show verbose output about remotes
    remotes = remote --verbose

    # Shows changes between branches
    review = "!r() { git log -U20 --patch --no-merges --reverse $1..; }; r"

    # Show short status
    st = status --short

    # List stashes
    stashes = stash list

    # Show verbose output about tags
    tags = tag --list

    # Reset everythingg
    trash = reset --hard HEAD

    # Uncommit the previous commits
    uncommit = reset --mixed HEAD~

    # Unstage changes
    unstage = reset --quiet HEAD --

    # Switches to master and removes all local branches not master
    wash = !"git reset --hard HEAD && (git checkout master || git checkout main) && (git branch | grep -v '^*' | xargs git branch -D)"
